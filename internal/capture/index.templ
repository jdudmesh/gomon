package capture

import "strconv"

templ Event(ev LogEvent) {
	<div class="flex flex-row text-blue-400 font-mono" data-event-date="{ev.CreatedAt}">
		<div class="w-1/6">{ ev.CreatedAt.Format("15:04:05.000") }</div>
		<div class="w-5/6 break-all">{ ev.EventData }</div>
	</div>
}

templ EventList(events []LogEvent) {
	for _, ev := range events {
		<div class="flex flex-row text-blue-400 font-mono" data-event-date="{ev.CreatedAt}">
			<div class="w-1/6">{ ev.CreatedAt.Format("15:04:05.000") }</div>
			<div class="w-5/6 break-all">{ ev.EventData }</div>
		</div>
	}
}

templ Console(currentRun int, runs []LogRun, events []LogEvent) {
	<!DOCTYPE html>
	<html>
		<head>
			<title>gomon console</title>
			<script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
			<script src="https://cdn.tailwindcss.com"></script>
			<link href="https://cdn.jsdelivr.net/npm/daisyui@3.9.3/dist/full.css" rel="stylesheet" type="text/css"/>
			<style>#event-list > :first-child { margin-top: auto !important; }</style>
		</head>
		<body class="bg-slate-900 text-white flex flex-col h-screen" data-current-run={ strconv.Itoa( currentRun) }>
			<nav class="grow-0 flex flex-row mx-2 p-2 justify-between items-center">
				<div class="flex flex-row">
					<a href="/" class="text-2xl text-bold">gomon</a>
				</div>
				<div class="flex flex-row items-center gap-2">
					<label class="px-4">Filter:</label>
					<input type="text" name="filter" class="input input-bordered text-slate-900" placeholder="filter" data-send="true"/>
					<label class="px-4">Stream:</label>
					<select name="stm" class="select select-bordered text-slate-900" hx-get="/search" hx-include="[data-send=&#39;true&#39;]" hx-target="#event-list" hx-trigger="input" data-send="true">
						<option value="all" selected>all</option>
						<option value="stdout">stdout</option>
						<option value="stderr">stderr</option>
					</select>
					<label class="px-4">Run:</label>
					<select name="run" class="select select-bordered text-slate-900" hx-get="/search" hx-include="[data-send=&#39;true&#39;]" hx-target="#event-list" hx-trigger="input" data-send="true">
						for _, r := range runs {
							<option
 								value={ strconv.Itoa(r.ID) }
 								if int(r.ID) == currentRun {
									selected?={ true }
								}
							>{ r.CreatedAt.Format("2006-01-02 15:04:05") }</option>
						}
					</select>
					<button id="btn-search" class="btn btn-primary" hx-get="/search" hx-include="[data-send=&#39;true&#39;]" hx-target="#event-list" hx-trigger="click">Search</button>
					<button id="btn-restart" class="btn btn-secondary" @click="hardRestart">Hard Restart</button>
				</div>
			</nav>
			<main id="event-list" class="grow mx-4 my-2 p-4 border-solid border border-blue-400 rounded-lg flex flex-col overflow-y-auto">
				@EventList(events)
			</main>
			<script>
				const currentRun = document.body.getAttribute("data-current-run");
				const eventList = document.getElementById("event-list");
				function listen() {
					const logSource = new EventSource("/__gomon__/events?stream=logs", {
						withCredentials: true,
					});

					const runSource = new EventSource("/__gomon__/events?stream=runs", {
						withCredentials: true,
					});

					logSource.onmessage = (event) => {
						const selectedRun = document.querySelector("select[name=run]").value;
						if (selectedRun != currentRun) {
							return;
						}
						eventList.insertAdjacentHTML("beforeend", event.data);
						eventList.scrollTop = eventList.scrollHeight;
					};

					runSource.onmessage = (event) => {
						window.location.reload();
					};
				}

				function clearConsole() {
					eventList.innerHTML = "";
				}

				async function hardRestart() {
					console.log("hard restart");
					const res = await fetch("/restart", {
						method: "POST"
					})
				}

				listen();
			</script>
		</body>
	</html>
}

