package webui

// gomon is a simple command line tool that watches your files and automatically restarts the application when it detects any changes in the working directory.
// Copyright (C) 2023 John Dudmesh

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import (
	"github.com/jdudmesh/gomon/internal/notification"
	"strconv"
)

var colourMap = map[notification.NotificationType]string{
	notification.NotificationTypeStartup:        "text-blue-400",
	notification.NotificationTypeShutdown:       "text-blue-400",
	notification.NotificationTypeHardRestart:    "text-blue-400",
	notification.NotificationTypeSoftRestart:    "text-blue-400",
	notification.NotificationTypeIPC:            "text-blue-400",
	notification.NotificationTypeStdOut:         "text-green-400",
	notification.NotificationTypeStdErr:         "text-red-400",
	notification.NotificationTypeOOBTaskStartup: "text-yellow-400",
	notification.NotificationTypeOOBTaskStdOut:  "text-yellow-400",
	notification.NotificationTypeOOBTaskStdErr:  "text-orange-400",
}

templ SearchNoResults() {
	<div class="text-2xl text-bold">no events found</div>
}

templ SearchSelect(runs []*notification.Notification, currentRun string) {
	<select
		id="search-select"
		name="r"
		class="select select-sm select-bordered w-48"
		x-model="runId"
	>
		<option value="all" selected>All</option>
		for _, r := range runs {
			<option
				value={ r.ChildProccessID }
				if r.ChildProccessID == currentRun {
					selected?={ true }
				}
			>{ r.Date.Format("2006-01-02 15:04:05") }</option>
		}
	</select>
}

templ Event(n *notification.Notification) {
	if col, ok := colourMap[n.Type]; ok {
		<div class={ "log-entry flex flex-row gap-4 items-stretch " + col } data-event-type={strconv.Itoa(int(n.Type))}>
			<div class="grow-0 shrink-0">{ n.Date.Format("15:04:05.000") }</div>
			<div class="break-all grow flex flex-row { col }">
				<span class="log-text">{ n.Message }</span>
			</div>
			<div class="grow-0 shrink-0 mr-4">
				if len(n.Message) > 0 {
					<div class="cursor-pointer entry-button" @click="onZoomEntry">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
							<path d="M6.25 8.75v-1h-1a.75.75 0 0 1 0-1.5h1v-1a.75.75 0 0 1 1.5 0v1h1a.75.75 0 0 1 0 1.5h-1v1a.75.75 0 0 1-1.5 0Z"></path>
							<path fill-rule="evenodd" d="M7 12c1.11 0 2.136-.362 2.965-.974l2.755 2.754a.75.75 0 1 0 1.06-1.06l-2.754-2.755A5 5 0 1 0 7 12Zm0-1.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z" clip-rule="evenodd"></path>
						</svg>
					</div>
				}
			</div>
		</div>
	} else {
		<div class="flex flex-row text-green-400 items-stretch" data-event-type={strconv.Itoa(int(n.Type))}>
			<div class="w-36 grow-0 shrink-0">{ n.Date.Format("15:04:05.000") }</div>
			<div class="break-all grow flex flex-row">
				<div class="log-text">{ n.Message }</div>
				if len(n.Message) > 0 {
					<div class="cursor-pointer entry-button">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4">
							<path d="M6.25 8.75v-1h-1a.75.75 0 0 1 0-1.5h1v-1a.75.75 0 0 1 1.5 0v1h1a.75.75 0 0 1 0 1.5h-1v1a.75.75 0 0 1-1.5 0Z"></path>
							<path fill-rule="evenodd" d="M7 12c1.11 0 2.136-.362 2.965-.974l2.755 2.754a.75.75 0 1 0 1.06-1.06l-2.754-2.755A5 5 0 1 0 7 12Zm0-1.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z" clip-rule="evenodd"></path>
						</svg>
					</div>
				}
			</div>
		</div>
	}
}

templ EmptyRun(id string) {
	<hr class="h-px my-8 bg-green-400 border-0 dark:bg-green-700"/>
	<div class="my-4" id={ id }></div>
}

templ EventList(notifs [][]*notification.Notification) {
	for _, run := range notifs {
		<hr class="h-px my-8 bg-green-400 border-0 dark:bg-green-700"/>
		<div class="my-4" id={ run[0].ChildProccessID }>
			for _, n := range run {
				@Event(n)
			}
		</div>
	}
}
