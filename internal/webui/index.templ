package webui

// gomon is a simple command line tool that watches your files and automatically restarts the application when it detects any changes in the working directory.
// Copyright (C) 2023 John Dudmesh

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import (
	"github.com/jdudmesh/gomon/internal/notification"
)

var colourMap = map[notification.NotificationType]string{
	notification.NotificationTypeStdOut: "text-green-400",
	notification.NotificationTypeStdErr: "text-red-400",
	notification.NotificationTypeOOBTaskStartup: "text-yellow-400",
	notification.NotificationTypeOOBTaskStdOut: "text-yellow-400",
	notification.NotificationTypeOOBTaskStdErr: "text-orange-400",
}

templ SearchNoResults() {
	<div class="text-2xl text-bold">no events found</div>
}

templ SearchSelect(runs []*notification.Notification, currentRun string) {
	<select id="search-select" name="r" class="select select-sm select-bordered text-slate-900 w-48" data-current-run-id={ currentRun } hx-get="/search" hx-include="[data-send=&#39;true&#39;]" hx-target="#event-list" hx-trigger="input" data-send="true">
		<option value="all" selected>All</option>
		for _, r := range runs {
			<option
				value={ r.ChildProccessID }
				if r.ChildProccessID == currentRun {
					selected?={ true }
				}
			>{ r.Date.Format("2006-01-02 15:04:05") }</option>
		}
	</select>
}

templ Event(n *notification.Notification) {
	if col, ok := colourMap[n.Type]; ok {
		<div class={ "flex flex-row items-stretch " + col} data-event-date="{n.CreatedAt}">
			<div class="w-36 grow-0 shrink-0">{ n.Date.Format("15:04:05.000") }</div>
			<div class="break-all grow { col }">{ n.Message }</div>
		</div>
	} else {
		<div class="flex flex-row text-green-400 items-stretch" data-event-date="{ev.CreatedAt}">
			<div class="w-36 grow-0 shrink-0">{ n.Date.Format("15:04:05.000") }</div>
			<div class="break-all grow">{ n.Message }</div>
		</div>
	}
}

templ EmptyRun(id string) {
	<hr class="h-px my-8 bg-green-400 border-0 dark:bg-green-700" />
	<div class="my-4" id={id}>
	</div>
}

templ EventList(notifs [][]*notification.Notification) {
	for _, run := range notifs {
		<hr class="h-px my-8 bg-green-400 border-0 dark:bg-green-700" />
		<div class="my-4" id={run[0].ChildProccessID}>
			for _, n := range run {
				@Event(n)
			}
		</div>
	}
}

templ Console(currentRun string, runs []*notification.Notification, events []*notification.Notification) {
	<!DOCTYPE html>
	<html>
		<head>
			<title>gomon console</title>
			<script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
			<script src="https://cdn.tailwindcss.com"></script>
			<link href="https://cdn.jsdelivr.net/npm/daisyui@3.9.3/dist/full.css" rel="stylesheet" type="text/css"/>
			<style>#event-list > :first-child { margin-top: auto !important; }</style>
		</head>
		<body class="bg-slate-900 text-white flex flex-col h-screen" data-current-run={ currentRun }>
			<nav class="grow-0 flex flex-row mx-2 p-2 justify-between items-center">
				<div class="flex flex-row">
					<a href="/" class="text-2xl text-bold">gomon</a>
				</div>
				<div class="flex flex-row items-center gap-2">
					<label class="px-4">Filter:</label>
					<input type="text" name="filter" class="input input-bordered text-slate-900" placeholder="filter" data-send="true"/>
					<label class="px-4">Stream:</label>
					<select name="stm" class="select select-bordered text-slate-900" hx-get="/search" hx-include="[data-send=&#39;true&#39;]" hx-target="#event-list" hx-trigger="input" data-send="true">
						<option value="all" selected>all</option>
						<option value="stdout">stdout</option>
						<option value="stderr">stderr</option>
					</select>
					<label class="px-4">Run:</label>
					@SearchSelect(runs, currentRun)
					<button id="btn-search" class="btn btn-primary" hx-get="/search" hx-include="[data-send=&#39;true&#39;]" hx-target="#event-list" hx-trigger="click">Search</button>
					<button id="btn-restart" class="btn btn-secondary" hx-post="/restart">Hard Restart</button>
				</div>
			</nav>
			<main id="event-list" class="grow mx-4 my-2 p-4 border-solid border border-blue-400 rounded-lg flex flex-col overflow-y-auto">
				hello
			</main>
			<script>
				const currentRun = document.body.getAttribute("data-current-run");
				const eventList = document.getElementById("event-list");
				function listen() {
					const logSource = new EventSource("/__gomon__/events?stream=logs", {
						withCredentials: true,
					});

					const runSource = new EventSource("/__gomon__/events?stream=runs", {
						withCredentials: true,
					});

					logSource.onmessage = (event) => {
						const selectedRun = document.querySelector("select[name=run]").value;
						if (selectedRun != currentRun) {
							return;
						}
						eventList.insertAdjacentHTML("beforeend", event.data);
						eventList.scrollTop = eventList.scrollHeight;
					};

					runSource.onmessage = (event) => {
						window.location.reload();
					};
				}

				function clearConsole() {
					eventList.innerHTML = "";
				}

				listen();
			</script>
		</body>
	</html>
}
