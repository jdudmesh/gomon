// Code generated by templ@v0.2.364 DO NOT EDIT.

package webui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

// gomon is a simple command line tool that watches your files and automatically restarts the application when it detects any changes in the working directory.
// Copyright (C) 2023 John Dudmesh

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import (
	"github.com/jdudmesh/gomon/internal/notification"
)

var colourMap = map[notification.NotificationType]string{
	notification.NotificationTypeStartup:        "text-blue-400",
	notification.NotificationTypeShutdown:       "text-blue-400",
	notification.NotificationTypeHardRestart:    "text-blue-400",
	notification.NotificationTypeSoftRestart:    "text-blue-400",
	notification.NotificationTypeIPC:            "text-blue-400",
	notification.NotificationTypeStdOut:         "text-green-400",
	notification.NotificationTypeStdErr:         "text-red-400",
	notification.NotificationTypeOOBTaskStartup: "text-yellow-400",
	notification.NotificationTypeOOBTaskStdOut:  "text-yellow-400",
	notification.NotificationTypeOOBTaskStdErr:  "text-orange-400",
}

func SearchNoResults() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"text-2xl text-bold\">")
		if err != nil {
			return err
		}
		var_2 := `no events found`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func SearchSelect(runs []*notification.Notification, currentRun string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<select id=\"search-select\" name=\"r\" class=\"select select-sm select-bordered text-slate-900 w-48\" data-current-run-id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(currentRun))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-get=\"/search\" hx-include=\"[data-send=&#39;true&#39;]\" hx-target=\"#event-list\" hx-trigger=\"input\" data-send=\"true\"><option value=\"all\" selected>")
		if err != nil {
			return err
		}
		var_4 := `All`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, r := range runs {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(r.ChildProccessID))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if r.ChildProccessID == currentRun {
				if true {
					_, err = templBuffer.WriteString(" selected")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var var_5 string = r.Date.Format("2006-01-02 15:04:05")
			_, err = templBuffer.WriteString(templ.EscapeString(var_5))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Event(n *notification.Notification) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if col, ok := colourMap[n.Type]; ok {
			var var_7 = []any{"flex flex-row items-stretch " + col}
			err = templ.RenderCSSItems(ctx, templBuffer, var_7...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_7).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" data-event-date=\"{n.CreatedAt}\"><div class=\"w-36 grow-0 shrink-0\">")
			if err != nil {
				return err
			}
			var var_8 string = n.Date.Format("15:04:05.000")
			_, err = templBuffer.WriteString(templ.EscapeString(var_8))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"break-all grow flex flex-row { col }\"><div class=\"log-text\">")
			if err != nil {
				return err
			}
			var var_9 string = n.Message
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"cursor-pointer entry-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\"><path d=\"M6.25 8.75v-1h-1a.75.75 0 0 1 0-1.5h1v-1a.75.75 0 0 1 1.5 0v1h1a.75.75 0 0 1 0 1.5h-1v1a.75.75 0 0 1-1.5 0Z\"></path><path fill-rule=\"evenodd\" d=\"M7 12c1.11 0 2.136-.362 2.965-.974l2.755 2.754a.75.75 0 1 0 1.06-1.06l-2.754-2.755A5 5 0 1 0 7 12Zm0-1.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z\" clip-rule=\"evenodd\"></path></svg></div></div></div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"flex flex-row text-green-400 items-stretch\" data-event-date=\"{ev.CreatedAt}\"><div class=\"w-36 grow-0 shrink-0\">")
			if err != nil {
				return err
			}
			var var_10 string = n.Date.Format("15:04:05.000")
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"break-all grow flex flex-row\"><div class=\"log-text\">")
			if err != nil {
				return err
			}
			var var_11 string = n.Message
			_, err = templBuffer.WriteString(templ.EscapeString(var_11))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"cursor-pointer entry-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4\"><path d=\"M6.25 8.75v-1h-1a.75.75 0 0 1 0-1.5h1v-1a.75.75 0 0 1 1.5 0v1h1a.75.75 0 0 1 0 1.5h-1v1a.75.75 0 0 1-1.5 0Z\"></path><path fill-rule=\"evenodd\" d=\"M7 12c1.11 0 2.136-.362 2.965-.974l2.755 2.754a.75.75 0 1 0 1.06-1.06l-2.754-2.755A5 5 0 1 0 7 12Zm0-1.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z\" clip-rule=\"evenodd\"></path></svg></div></div></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func EmptyRun(id string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_12 := templ.GetChildren(ctx)
		if var_12 == nil {
			var_12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<hr class=\"h-px my-8 bg-green-400 border-0 dark:bg-green-700\"><div class=\"my-4\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(id))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func EventList(notifs [][]*notification.Notification) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_13 := templ.GetChildren(ctx)
		if var_13 == nil {
			var_13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for _, run := range notifs {
			_, err = templBuffer.WriteString("<hr class=\"h-px my-8 bg-green-400 border-0 dark:bg-green-700\"> <div class=\"my-4\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(run[0].ChildProccessID))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			for _, n := range run {
				err = Event(n).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Console(currentRun string, runs []*notification.Notification, events []*notification.Notification) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_14 := templ.GetChildren(ctx)
		if var_14 == nil {
			var_14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html><head><title>")
		if err != nil {
			return err
		}
		var_15 := `gomon console`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title><script src=\"https://unpkg.com/htmx.org@1.9.6\" integrity=\"sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni\" crossorigin=\"anonymous\">")
		if err != nil {
			return err
		}
		var_16 := ``
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><script src=\"https://cdn.tailwindcss.com\">")
		if err != nil {
			return err
		}
		var_17 := ``
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><link href=\"https://cdn.jsdelivr.net/npm/daisyui@3.9.3/dist/full.css\" rel=\"stylesheet\" type=\"text/css\"><style>")
		if err != nil {
			return err
		}
		var_18 := `#event-list > :first-child { margin-top: auto !important; }`
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</style></head><body class=\"bg-slate-900 text-white flex flex-col h-screen\" data-current-run=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(currentRun))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><nav class=\"grow-0 flex flex-row mx-2 p-2 justify-between items-center\"><div class=\"flex flex-row\"><a href=\"/\" class=\"text-2xl text-bold\">")
		if err != nil {
			return err
		}
		var_19 := `gomon`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div><div class=\"flex flex-row items-center gap-2\"><label class=\"px-4\">")
		if err != nil {
			return err
		}
		var_20 := `Filter:`
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"filter\" class=\"input input-bordered text-slate-900\" placeholder=\"filter\" data-send=\"true\"><label class=\"px-4\">")
		if err != nil {
			return err
		}
		var_21 := `Stream:`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select name=\"stm\" class=\"select select-bordered text-slate-900\" hx-get=\"/search\" hx-include=\"[data-send=&#39;true&#39;]\" hx-target=\"#event-list\" hx-trigger=\"input\" data-send=\"true\"><option value=\"all\" selected>")
		if err != nil {
			return err
		}
		var_22 := `all`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"stdout\">")
		if err != nil {
			return err
		}
		var_23 := `stdout`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"stderr\">")
		if err != nil {
			return err
		}
		var_24 := `stderr`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option></select><label class=\"px-4\">")
		if err != nil {
			return err
		}
		var_25 := `Run:`
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		err = SearchSelect(runs, currentRun).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button id=\"btn-search\" class=\"btn btn-primary\" hx-get=\"/search\" hx-include=\"[data-send=&#39;true&#39;]\" hx-target=\"#event-list\" hx-trigger=\"click\">")
		if err != nil {
			return err
		}
		var_26 := `Search`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button id=\"btn-restart\" class=\"btn btn-secondary\" hx-post=\"/restart\">")
		if err != nil {
			return err
		}
		var_27 := `Hard Restart`
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></nav><main id=\"event-list\" class=\"grow mx-4 my-2 p-4 border-solid border border-blue-400 rounded-lg flex flex-col overflow-y-auto\">")
		if err != nil {
			return err
		}
		var_28 := `hello`
		_, err = templBuffer.WriteString(var_28)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</main><script>")
		if err != nil {
			return err
		}
		var_29 := `
				const currentRun = document.body.getAttribute("data-current-run");
				const eventList = document.getElementById("event-list");
				function listen() {
					const logSource = new EventSource("/__gomon__/events?stream=logs", {
						withCredentials: true,
					});

					const runSource = new EventSource("/__gomon__/events?stream=runs", {
						withCredentials: true,
					});

					logSource.onmessage = (event) => {
						const selectedRun = document.querySelector("select[name=run]").value;
						if (selectedRun != currentRun) {
							return;
						}
						eventList.insertAdjacentHTML("beforeend", event.data);
						eventList.scrollTop = eventList.scrollHeight;
					};

					runSource.onmessage = (event) => {
						window.location.reload();
					};
				}

				function clearConsole() {
					eventList.innerHTML = "";
				}

				listen();
			`
		_, err = templBuffer.WriteString(var_29)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
