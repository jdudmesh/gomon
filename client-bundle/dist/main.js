function We(e,t){const n=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)n[r[s]]=!0;return t?s=>!!n[s.toLowerCase()]:s=>!!n[s]}const Fe=()=>{},Ue=Object.prototype.hasOwnProperty,F=(e,t)=>Ue.call(e,t),b=Array.isArray,k=e=>_e(e)==="[object Map]",I=e=>typeof e=="function",ze=e=>typeof e=="string",B=e=>typeof e=="symbol",N=e=>e!==null&&typeof e=="object",Be=e=>(N(e)||I(e))&&I(e.then)&&I(e.catch),Ve=Object.prototype.toString,_e=e=>Ve.call(e),Ge=e=>_e(e).slice(8,-1),te=e=>ze(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,O=(e,t)=>!Object.is(e,t);let Ye;function $e(e,t=Ye){t&&t.active&&t.effects.push(e)}const Se=e=>{const t=new Set(e);return t.w=0,t.n=0,t},ve=e=>(e.w&v)>0,Te=e=>(e.n&v)>0,Xe=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=v},Je=e=>{const{deps:t}=e;if(t.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r];ve(s)&&!Te(s)?s.delete(e):t[n++]=s,s.w&=~v,s.n&=~v}t.length=n}},X=new WeakMap;let P=0,v=1;const J=30;let E;const R=Symbol(""),Q=Symbol("");class Qe{constructor(t,n=null,r){this.fn=t,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,$e(this,r)}run(){if(!this.active)return this.fn();let t=E,n=y;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=E,E=this,y=!0,v=1<<++P,P<=J?Xe(this):le(this),this.fn()}finally{P<=J&&Je(this),v=1<<--P,E=this.parent,y=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){E===this?this.deferStop=!0:this.active&&(le(this),this.onStop&&this.onStop(),this.active=!1)}}function le(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let y=!0;const Re=[];function Ze(){Re.push(y),y=!1}function xe(){const e=Re.pop();y=e===void 0?!0:e}function p(e,t,n){if(y&&E){let r=X.get(e);r||X.set(e,r=new Map);let s=r.get(n);s||r.set(n,s=Se()),et(s)}}function et(e,t){let n=!1;P<=J?Te(e)||(e.n|=v,n=!ve(e)):n=!e.has(E),n&&(e.add(E),E.deps.push(e))}function S(e,t,n,r,s,o){const a=X.get(e);if(!a)return;let i=[];if(t==="clear")i=[...a.values()];else if(n==="length"&&b(e)){const c=Number(r);a.forEach((h,u)=>{(u==="length"||!B(u)&&u>=c)&&i.push(h)})}else switch(n!==void 0&&i.push(a.get(n)),t){case"add":b(e)?te(n)&&i.push(a.get("length")):(i.push(a.get(R)),k(e)&&i.push(a.get(Q)));break;case"delete":b(e)||(i.push(a.get(R)),k(e)&&i.push(a.get(Q)));break;case"set":k(e)&&i.push(a.get(R));break}if(i.length===1)i[0]&&ue(i[0]);else{const c=[];for(const h of i)h&&c.push(...h);ue(Se(c))}}function ue(e,t){const n=b(e)?e:[...e];for(const r of n)r.computed&&fe(r);for(const r of n)r.computed||fe(r)}function fe(e,t){(e!==E||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const tt=We("__proto__,__v_isRef,__isVue"),ye=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(B)),he=nt();function nt(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...n){const r=l(this);for(let o=0,a=this.length;o<a;o++)p(r,"get",o+"");const s=r[t](...n);return s===-1||s===!1?r[t](...n.map(l)):s}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...n){Ze();const r=l(this)[t].apply(this,n);return xe(),r}}),e}function rt(e){const t=l(this);return p(t,"has",e),t.hasOwnProperty(e)}class Me{constructor(t=!1,n=!1){this._isReadonly=t,this._shallow=n}get(t,n,r){const s=this._isReadonly,o=this._shallow;if(n==="__v_isReactive")return!s;if(n==="__v_isReadonly")return s;if(n==="__v_isShallow")return o;if(n==="__v_raw"&&r===(s?o?wt:Ae:o?gt:Oe).get(t))return t;const a=b(t);if(!s){if(a&&F(he,n))return Reflect.get(he,n,r);if(n==="hasOwnProperty")return rt}const i=Reflect.get(t,n,r);return(B(n)?ye.has(n):tt(n))||(s||p(t,"get",n),o)?i:T(i)?a&&te(n)?i:i.value:N(i)?s?Ne(i):G(i):i}}class st extends Me{constructor(t=!1){super(!1,t)}set(t,n,r,s){let o=t[n];if(U(o)&&T(o)&&!T(r))return!1;if(!this._shallow&&(!Ce(r)&&!U(r)&&(o=l(o),r=l(r)),!b(t)&&T(o)&&!T(r)))return o.value=r,!0;const a=b(t)&&te(n)?Number(n)<t.length:F(t,n),i=Reflect.set(t,n,r,s);return t===l(s)&&(a?O(r,o)&&S(t,"set",n,r):S(t,"add",n,r)),i}deleteProperty(t,n){const r=F(t,n);t[n];const s=Reflect.deleteProperty(t,n);return s&&r&&S(t,"delete",n,void 0),s}has(t,n){const r=Reflect.has(t,n);return(!B(n)||!ye.has(n))&&p(t,"has",n),r}ownKeys(t){return p(t,"iterate",b(t)?"length":R),Reflect.ownKeys(t)}}class ot extends Me{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const it=new st,at=new ot,ne=e=>e,V=e=>Reflect.getPrototypeOf(e);function L(e,t,n=!1,r=!1){e=e.__v_raw;const s=l(e),o=l(t);n||(O(t,o)&&p(s,"get",t),p(s,"get",o));const{has:a}=V(s),i=r?ne:n?se:re;if(a.call(s,t))return i(e.get(t));if(a.call(s,o))return i(e.get(o));e!==s&&e.get(t)}function K(e,t=!1){const n=this.__v_raw,r=l(n),s=l(e);return t||(O(e,s)&&p(r,"has",e),p(r,"has",s)),e===s?n.has(e):n.has(e)||n.has(s)}function j(e,t=!1){return e=e.__v_raw,!t&&p(l(e),"iterate",R),Reflect.get(e,"size",e)}function de(e){e=l(e);const t=l(this);return V(t).has.call(t,e)||(t.add(e),S(t,"add",e,e)),this}function pe(e,t){t=l(t);const n=l(this),{has:r,get:s}=V(n);let o=r.call(n,e);o||(e=l(e),o=r.call(n,e));const a=s.call(n,e);return n.set(e,t),o?O(t,a)&&S(n,"set",e,t):S(n,"add",e,t),this}function ge(e){const t=l(this),{has:n,get:r}=V(t);let s=n.call(t,e);s||(e=l(e),s=n.call(t,e)),r&&r.call(t,e);const o=t.delete(e);return s&&S(t,"delete",e,void 0),o}function we(){const e=l(this),t=e.size!==0,n=e.clear();return t&&S(e,"clear",void 0,void 0),n}function q(e,t){return function(r,s){const o=this,a=o.__v_raw,i=l(a),c=t?ne:e?se:re;return!e&&p(i,"iterate",R),a.forEach((h,u)=>r.call(s,c(h),c(u),o))}}function H(e,t,n){return function(...r){const s=this.__v_raw,o=l(s),a=k(o),i=e==="entries"||e===Symbol.iterator&&a,c=e==="keys"&&a,h=s[e](...r),u=n?ne:t?se:re;return!t&&p(o,"iterate",c?Q:R),{next(){const{value:d,done:w}=h.next();return w?{value:d,done:w}:{value:i?[u(d[0]),u(d[1])]:u(d),done:w}},[Symbol.iterator](){return this}}}}function _(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function ct(){const e={get(o){return L(this,o)},get size(){return j(this)},has:K,add:de,set:pe,delete:ge,clear:we,forEach:q(!1,!1)},t={get(o){return L(this,o,!1,!0)},get size(){return j(this)},has:K,add:de,set:pe,delete:ge,clear:we,forEach:q(!1,!0)},n={get(o){return L(this,o,!0)},get size(){return j(this,!0)},has(o){return K.call(this,o,!0)},add:_("add"),set:_("set"),delete:_("delete"),clear:_("clear"),forEach:q(!0,!1)},r={get(o){return L(this,o,!0,!0)},get size(){return j(this,!0)},has(o){return K.call(this,o,!0)},add:_("add"),set:_("set"),delete:_("delete"),clear:_("clear"),forEach:q(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{e[o]=H(o,!1,!1),n[o]=H(o,!0,!1),t[o]=H(o,!1,!0),r[o]=H(o,!0,!0)}),[e,n,t,r]}const[lt,ut,ft,ht]=ct();function Ie(e,t){const n=t?e?ht:ft:e?ut:lt;return(r,s,o)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(F(n,s)&&s in r?n:r,s,o)}const dt={get:Ie(!1,!1)},pt={get:Ie(!0,!1)},Oe=new WeakMap,gt=new WeakMap,Ae=new WeakMap,wt=new WeakMap;function mt(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Et(e){return e.__v_skip||!Object.isExtensible(e)?0:mt(Ge(e))}function G(e){return U(e)?e:Pe(e,!1,it,dt,Oe)}function Ne(e){return Pe(e,!0,at,pt,Ae)}function Pe(e,t,n,r,s){if(!N(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=s.get(e);if(o)return o;const a=Et(e);if(a===0)return e;const i=new Proxy(e,a===2?r:n);return s.set(e,i),i}function D(e){return U(e)?D(e.__v_raw):!!(e&&e.__v_isReactive)}function U(e){return!!(e&&e.__v_isReadonly)}function Ce(e){return!!(e&&e.__v_isShallow)}function l(e){const t=e&&e.__v_raw;return t?l(t):e}const re=e=>N(e)?G(e):e,se=e=>N(e)?Ne(e):e;function T(e){return!!(e&&e.__v_isRef===!0)}function W(e,t,n){let r;try{r=n?e(...n):e()}catch(s){Le(s,t)}return r}function Z(e,t,n){if(I(e)){const s=W(e,t,n);return s&&Be(s)&&s.catch(o=>{Le(o,t)}),s}const r=[];for(let s=0;s<e.length;s++)r.push(Z(e[s],t,n));return r}function Le(e,t){console.error(new Error(`[@vue-reactivity/watch]: ${t}`)),console.error(e)}function bt(e){console.warn(_t(e))}function _t(e){return new Error(`[reactivue]: ${e}`)}var me={};function Ke(e,t,n){return St(e,t,n)}function St(e,t,{immediate:n,deep:r,flush:s}={}){let o,a=!1,i=!1;if(T(e)?(o=()=>e.value,a=Ce(e)):D(e)?(o=()=>e,r=!0):b(e)?(i=!0,a=e.some(D),o=()=>e.map(f=>T(f)?f.value:D(f)?M(f):I(f)?W(f,"watch getter"):bt("invalid source"))):I(e)?t?o=()=>W(e,"watch getter"):o=()=>(c&&c(),Z(e,"watch callback",[h])):o=Fe,t&&r){const f=o;o=()=>M(f())}let c,h=f=>{c=m.onStop=()=>{W(f,"watch cleanup")}},u=i?[]:me;const d=()=>{if(m.active)if(t){const f=m.run();(r||a||(i?f.some(($,De)=>O($,u[De])):O(f,u)))&&(c&&c(),Z(t,"watch value",[f,u===me?void 0:u,h]),u=f)}else m.run()};d.allowRecurse=!!t;let w;s==="sync"?w=d:w=()=>{d()};const m=new Qe(o,w);return t?n?d():u=m.run():m.run(),()=>m.stop()}function M(e,t=new Set){if(!N(e)||t.has(e))return e;if(t.add(e),b(e))for(let n=0;n<e.length;n++)M(e[n],t);else if(e instanceof Map)e.forEach((n,r)=>{M(e.get(r),t)});else if(e instanceof Set)e.forEach(n=>{M(n,t)});else for(const n of Object.keys(e))M(e[n],t);return e}let x="";const g=G({state:"loading",contexts:[],sseSources:[]}),je={contexts:[]};Ke(()=>g.contexts,(e,t)=>{if(g.state==="interactive"||g.state==="complete")for(const n of e)t.includes(n)||n.sourceElement&&n.sourceElement.dispatchEvent(new CustomEvent("kilo:load"))});const vt=new MutationObserver(e=>{for(const t of e)for(const n of t.removedNodes){if(n.nodeType!==Node.ELEMENT_NODE)continue;const r=n;for(const s of je.contexts)if(s.bindings){for(const o in s.bindings)if(s.bindings[o].element===r){for(const i of s.bindings[o].events)s.bindings[o].element.removeEventListener("change",s.bindings[o].handler);He(s)(o,s.bindings[o].selector)}}}});document.addEventListener("readystatechange",e=>{if(g.state=document.readyState,document.readyState==="interactive"||g.state==="complete"){vt.observe(document.body,{childList:!0,subtree:!0});for(const t of g.contexts)t.sourceElement&&t.sourceElement.dispatchEvent(new CustomEvent("kilo:load"));for(const t of g.sseSources)t.handler&&t.source.addEventListener("message",t.handler)}});function Tt(e){return t=>{try{const n=t;if(e.isPaused){e.queue.push(n);return}const r=JSON.parse(n.data),s=document.querySelector(r["x-kilo-target"]),o=r["x-kilo-swap"],a=r["x-kilo-markup"];if(!s)throw new Error("Target element not found");oe({selector:r["x-kilo-target"],sourceElement:s,targetElement:s,triggerEvent:null,trigger:async()=>{},actor:null,swapper:null,beforeActor:null,afterActor:null},o,a)}catch(n){console.error(n),console.error(t)}}}async function oe(e,t,n){var u,d,w;let r=e.targetElement;if(!r){if(!e.sourceElement)throw new Error("Element is not defined");r=e.sourceElement}const s=t.split(" "),o=s[0],a=s.length>1?s[1]:"",i=document.createRange();i.selectNode(r);const c=i.createContextualFragment(n),h=c.firstChild;switch(o){case"innerHTML":for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(c);break;case"outerHTML":(u=r.parentNode)==null||u.replaceChild(c,r);break;case"beforebegin":(d=r.parentNode)==null||d.insertBefore(c,r);break;case"afterbegin":r.insertBefore(c,r.firstChild);break;case"beforeend":r.appendChild(c);break;case"afterend":(w=r.parentNode)==null||w.insertBefore(c,r.nextSibling);break}if(a){const m=a.split(":"),f=m[0],$=m[1];switch(f){case"scroll":switch($){case"view":h.scrollIntoView();break}break}}}function Rt(e,t){const n=new FormData(e);switch(t.method){case"GET":t.url=t.url+"?"+new URLSearchParams(n).toString();break;case"POST":t.body=n;break}}async function Ee(e,t,n){const r=typeof t=="string"?t:t(e);new FormData;const s={url:x+r,contentType:"",cancel:!1,method:n};if(e.sourceElement.tagName==="FORM"){const i=e.sourceElement;Rt(i,s)}if(e.beforeActor&&(await e.beforeActor(s),s.cancel))return;const o=await fetch(s.url,s);if(e.afterActor&&!await e.afterActor(o))return;if(e.swapper)return e.swapper(o);const a=await o.text();return oe(e,"innerHTML",a)}function be(e){return{swap:t=>(e.swapper=async n=>{const r=await n.text();return oe(e,t,r)},{...ie(e)}),...C(e)}}function z(e){return{target:t=>(typeof t=="string"?e.targetElement=document.querySelector(t):e.targetElement=t(e),be(e)),before:t=>(e.beforeActor=t,z(e)),after:t=>(e.afterActor=t,z(e)),...be(e),...C(e)}}function C(e){return{retrigger:()=>{if(!e.actor)throw new Error("No actor available");e.actor(null)}}}function ie(e){if(!e.sourceElement)throw new Error("source element is not defined");if(!e.triggerEvent)switch(e.sourceElement.tagName){case"BUTTON":e.triggerEvent="click";break;case"FORM":e.triggerEvent="submit";break;default:e.triggerEvent="kilo:load";break}return e.sourceElement.addEventListener(e.triggerEvent,e.trigger),{get:t=>(e.actor=async n=>{n==null||n.preventDefault(),Ee(e,t,"GET")},{...z(e),...C(e)}),post:t=>(e.actor=async n=>{n==null||n.preventDefault(),Ee(e,t,"POST")},{...z(e),...C(e)}),...C(e)}}function yt(e){return{on:t=>{if(!e.sourceElement)throw new Error("Element is not defined");return e.triggerEvent=t,ie(e)}}}function ee(e){return{pause:t=>{if(e.isPaused=t,!e.handler)return ee(e);if(!e.isPaused){for(;e.queue.length>0;){const n=e.queue.shift();n&&e.handler(n)}e.queue=[]}return ee(e)},clear:()=>{e.queue=[]},close:()=>{e.source.close(),g.sseSources=g.sseSources.filter(t=>t!==e)}}}function qe(){return{baseUrl:e=>(x=e,{...qe()}),sse:(e,t)=>{const n={withCredentials:!0,...t},r={source:new EventSource(x+e,n),isPaused:!1,handler:void 0,queue:[]};return r.handler=Tt(r),g.sseSources.push(r),ee(r)}}}function He(e){return(t,n)=>{const r=document.querySelector(n);if(!r)throw new Error("Element not found");const s=a=>{const i=a.target;switch(i.tagName){case"INPUT":const c=i;switch(c.type){case"checkbox":e.state[t]=c.checked;break;default:e.state[t]=c.value;break}break;case"SELECT":e.state[t]=i.value;break;case"TEXTAREA":e.state[t]=i.value;break}},o={field:t,selector:n,events:[],element:r,handler:s};switch(o.events.push("change"),e.bindings[t]=o,r.tagName){case"INPUT":switch(r.type){case"text":o.events.push("keyup");break}break;case"SELECT":o.events.push("select");break;case"TEXTAREA":o.events.push("keyup");break}for(const a of o.events)r.addEventListener(a,s);return{...ae(e)}}}function ae(e){return{model:e.state,watch:(t,n)=>(Ke(()=>e.state[t],async(r,s)=>{await n(r,s)}),{...ae(e)}),bind:He(e)}}function Y(e){const t=document.querySelector(e);if(!t)throw new Error("source element not founf");const n={selector:e,sourceElement:t,trigger:async r=>{if(!n.actor)throw new Error("No event handler specified");n.actor(r)},targetElement:null,triggerEvent:null,actor:null,swapper:null,beforeActor:null,afterActor:null};return g.contexts.push(n),{...yt(n),...ie(n)}}function Mt(e){const t={state:G(e),bindings:{}};return je.contexts.push(t),{...ae(t)}}function ke(){return qe()}ke().baseUrl("http://localhost:4001");const ce=ke().sse("/sse?stream=events",{withCredentials:!1}),A=Mt({searchText:"",runId:0,isShowingSearchResults:!1}).bind("searchText","#search-input").bind("runId","#search-select"),It=Y("#search-select").get("/components/search-select").swap("outerHTML"),Ot=Y("#log-output-inner").get("/actions/search"),At=Y("#search-form").get("/actions/search").before(()=>{A.model.isShowingSearchResults=!0}).target("#log-output-inner");A.watch("searchText",e=>{const t=e.length>0;t||(A.model.isShowingSearchResults=!1),ce.pause(t);const n=document.querySelector(".blinking-cursor");n&&(n.style.visibility=t?"hidden":"visible")});A.watch("isShowingSearchResults",e=>{e||(ce.clear(),It.retrigger(),Ot.retrigger())});A.watch("runId",e=>{const n=document.querySelector("#search-select").getAttribute("data-current-run-id"),r=e!=n;ce.pause(r),r&&A.model.searchText.length>0&&At.retrigger();const s=document.querySelector(".blinking-cursor");s&&(s.style.visibility=r?"hidden":"visible")});Y("#restart").post("/actions/restart").swap("none");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
